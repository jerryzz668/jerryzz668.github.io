<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu16.04下安装cuda和cudnn(亲测有效)</title>
    <url>/2020/01/21/Ubuntu16.04%E4%B8%8B%E5%AE%89%E8%A3%85cuda%E5%92%8Ccudnn(%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88)/</url>
    <content><![CDATA[<p>上一篇博客讲述了Ubuntu16.04下如何安装显卡驱动，这篇继续讲述如何安装cuda和cudnn。首先安装之前首先要确认你需要安装的cuda和cudnn版本<a id="more"></a></p>
<h3 id="cuda的安装"><a href="#cuda的安装" class="headerlink" title="cuda的安装"></a>cuda的安装</h3><p>1.下载<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">cuda安装文件</a>。按照你的系统配置选择安装包，例如我安装的是cuda9.0，那么选择Linux，x86_64，Ubuntu，16.04，最后一个Installer type 选择runfile(local)或者deb(local)都可以，我选择的是deb(local)，下面会分别给出相应的安装过程。<br>2.1 deb(local)安装<br>进入到deb(local)位置，我的是放在Download路径下，在此路径下打开终端，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -I cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64.deb</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y cuda</span><br></pre></td></tr></table></figure>
<p>2.2 安装完毕之后，设置环境变量。打开bashrc文件，将cuda路径写入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>按i进行编辑，把以下3个路径粘贴到bashrc文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/usr/<span class="built_in">local</span>/cuda-9.0/lib64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/cuda-9.0/bin</span><br><span class="line"><span class="built_in">export</span> CUDA_HOME=<span class="variable">$CUDA_HOME</span>:/usr/<span class="built_in">local</span>/cuda-9.0</span><br></pre></td></tr></table></figure>
<p>然后友情提示：输入<code>:wq</code>,回车即可完成添加路径。<br>终端运行：<code>source ~/.bashrc</code><br>查看cuda 版本<br>输入<code>nvcc –-version</code><br>3.1 runfile(local)安装<br>进入到runfile(local)位置，我的是放在Download路径下，在此路径下打开终端，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh cuda_9.0.176_384.81_linux.run</span><br></pre></td></tr></table></figure>
<p>然后找个按住回车键不撒手，直到服务条款显示到100%，然后按照下面进行选择：accept，n(不要安装driver)，y，y，y，<br>安装完成后，设置环境变量，方法同deb(local)安装</p>
<h3 id="cudnn的安装"><a href="#cudnn的安装" class="headerlink" title="cudnn的安装"></a>cudnn的安装</h3><p>1.下载对应的<a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">安装文件</a><br>2.安装cudnn<br>解压刚下载的文件，出现cuda文件夹，当前路径(我的路径为Download)打开终端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda/include/ </span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/<span class="built_in">local</span>/cuda/lib64/</span><br><span class="line">sudo chmod a+r /usr/<span class="built_in">local</span>/cuda/include/cudnn.h</span><br><span class="line">sudo chmod a+r /usr/<span class="built_in">local</span>/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>
<p>3.查看cudnn版本<br>终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /usr/<span class="built_in">local</span>/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure>
<p>看到红白相间的版本信息，即安装成功。</p>
<h3 id="安装完成，快去感受一下你的算力吧"><a href="#安装完成，快去感受一下你的算力吧" class="headerlink" title="安装完成，快去感受一下你的算力吧"></a>安装完成，快去感受一下你的算力吧</h3>]]></content>
      <categories>
        <category>system</category>
      </categories>
      <tags>
        <tag>cuda</tag>
        <tag>cudnn</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04下安装NVIDIA显卡驱动</title>
    <url>/2020/01/17/Ubuntu16.04%E4%B8%8B%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<p>Ubuntu16.04默认安装了第三方开源的驱动程序nouveau，安装nvidia显卡驱动首先需要禁用nouveau，不然会碰到冲突的问题，导致无法安装nvidia显卡驱动。<a id="more"></a></p>
<h4 id="第一步-禁用nouveau"><a href="#第一步-禁用nouveau" class="headerlink" title="第一步, 禁用nouveau"></a>第一步, 禁用nouveau</h4><ol>
<li>编辑文件blacklist.conf <code>sudo vim /etc/modprobe.d/blacklist.conf</code></li>
<li>若未安装vim, 则<code>sudo apt-get install vim</code>安装</li>
<li>在文件最后部分插入以下两行内容<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure></li>
<li>更新系统<code>sudo update-initramfs -u</code></li>
<li>重启系统（一定要重启）</li>
<li>验证nouveau是否已禁用<code>lsmod | grep nouveau</code><br>没有信息显示，说明nouveau已被禁用，接下来可以安装nvidia的显卡驱动。</li>
</ol>
<hr>
<h4 id="第二步-在英伟达的官网上查找你自己电脑的显卡型号然后下载相应的驱动。网址：NVIDIA官网"><a href="#第二步-在英伟达的官网上查找你自己电脑的显卡型号然后下载相应的驱动。网址：NVIDIA官网" class="headerlink" title="第二步, 在英伟达的官网上查找你自己电脑的显卡型号然后下载相应的驱动。网址：NVIDIA官网"></a>第二步, 在英伟达的官网上查找你自己电脑的显卡型号然后下载相应的驱动。网址：<a href="http://www.nvidia.cn/page/home.html" target="_blank" rel="noopener">NVIDIA官网</a></h4><p>我下载的版本：NVIDIA-Linux-x86_64-430.50.run（注意不同的版本最后安装执行的具体选项不同）</p>
<ol>
<li>下载后的run文件拷贝至home目录下</li>
<li>在ubuntu下按ctrl+alt+f1进入命令行界面，关闭图形界面，不执行会出错<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure></li>
<li>然后卸载掉原有驱动(若安装过其他版本或其他方式安装过驱动执行此)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove nvidia-*</span><br></pre></td></tr></table></figure></li>
<li>给驱动run文件赋予执行权限：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod  a+x NVIDIA-Linux-x86_64-430.50.run</span><br></pre></td></tr></table></figure></li>
<li>安装：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./NVIDIA-Linux-x86_64-396.18.run -no-x-check -no-nouveau-check -no-opengl-files</span><br></pre></td></tr></table></figure>
//只有禁用opengl这样安装才不会出现循环登陆的问题<br>//-no-x-check：安装驱动时关闭X服务<br>//-no-nouveau-check：安装驱动时禁用nouveau<br>//-no-opengl-files：只安装驱动文件，不安装OpenGL文件</li>
<li>安装过程中的选项：（这是copy别人的，自己的没记住，我也是尝试选择了好多遍才安装好）</li>
</ol>
<p>Q:The distribution-provided pre-install script failed! Are you sure you want to continue? 选择 yes 继续。<br>Q:Would you like to register the kernel module souces with DKMS? This will allow DKMS to automatically build a new module, if you install a different kernel later?  选择 No 继续。<br>Q：xxx？ 选择install without signing<br>Q:Nvidia’s 32-bit compatibility libraries? 选择 No 继续。<br>Q:Would you like to run the nvidia-xconfigutility to automatically update your x configuration so that the NVIDIA x driver will be used when you restart x? Any pre-existing x confile will be backed up.  选择 Yes  继续</p>
<hr>
<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><ol>
<li>挂载NVIDIA驱动<code>modprobe nvidia</code></li>
<li>查看驱动是否安装成功：<code>nvidia-smi</code></li>
<li>恢复图形界面 <code>sudo service lightdm start</code></li>
</ol>
<hr>
<h3 id="至此大功告成"><a href="#至此大功告成" class="headerlink" title="至此大功告成"></a>至此大功告成</h3>]]></content>
      <categories>
        <category>system</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Nvidia</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你使用hexo搭建个人博客并部署到远端（Mac版)</title>
    <url>/2019/12/30/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E8%BF%9C%E7%AB%AF%EF%BC%88Mac%E7%89%88)/</url>
    <content><![CDATA[<p>Hexo+GitHub的好处：<br>全是静态文件，访问速度快；</p>
<a id="more"></a>
<p>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；<br>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；<br>博客内容可以轻松打包、转移、发布到其它平台；<br>出现问题的话，网上解决这种问题的方案比较多,等等；</p>
<hr>
<h2 id="下面开始搭建"><a href="#下面开始搭建" class="headerlink" title="下面开始搭建"></a>下面开始搭建</h2><ol>
<li>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>（网址：nodejs.org）下载LTS长期支持版，安装。</li>
<li>打开terminal,切换到root用户，输入<code>$ sudo su</code>，输入密码，</li>
<li>安装cnpm包管理器，输入  (-g 表示全局安装)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>
<li>用cnpm安装hexo，输入  （hexo -v 查看当前版本)<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">$ cnpm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></li>
<li>新建名为blog的文件夹，所有blog相关的文件都在这个文件里面，如果出错，直接干掉这个文件夹就可以了。 输入<code>$  mkdir blog</code></li>
<li>进入blog文件夹  输入<code>$ cd blog/</code>,使用hexo进行安装博客,输入<code>$ sudo hexo init</code></li>
<li>安装完成，进行启动 输入<code>$ hexo s</code>（s代表server）出现Hexo is running at http：//localhost：4000. 复制网址到网页，你的博客已经出现了，默认为你创建了一篇博客。</li>
<li>ctrl+c中断当前操作，新建一篇你自己的博客 输入（n代表new)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo n “我的第一篇博客”</span><br></pre></td></tr></table></figure></li>
<li>进入新建的博客,输入<code>$ cd source/_posts/</code>,编辑博客,输入<code>$ vim 我的第一篇博客.md</code>,将以下基于markdown格式的文本复制到你的博客中，或者输入i，自己将一下内容手敲进去：<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 第一章</span></span><br><span class="line"><span class="string">内容</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">##第二章</span></span><br><span class="line"><span class="string">内容</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">##参考文献</span></span><br><span class="line"><span class="string">jerryzz668.github.io</span></span><br></pre></td></tr></table></figure>
先esc然后:wq（w是保存，q是退出）</li>
<li>后退两层目录到blog路径下,输入<code>$ cd ../..</code></li>
<li>清理一下,输入<code>$ hexo clean</code></li>
<li>编辑完内容生成博客,输入<code>$ hexo g</code>（g代表generate）</li>
<li>启动刚生成的博客,输入<code>$ hexo s</code>,同样复制本地4000端口网址到网页，刚写好的博客就成功生成了</li>
<li>ctrl+c中断当前操作。博客总不能放在本地使用吧，现在我们将他部署到远端公开使用，有一个免费的平台Github（大型同性交友网站），去注册一个GitHub账号（名字起的好听点，以后会用到）</li>
<li>登陆GitHub，点击头像旁边的‘+’，new 一个Repository，然后在owner后面的repository name下填写你的用户名.github.io （注意：此处的你的昵称一定要填写正确，比如我的是jerryzz668.github.io, 以后就用这个网址来访问你的博客），description中可以填写 我的hexo博客，然后create repository，页面不要关闭，一会步骤17会用到。</li>
<li>回到terminal,在blog路径下安装一个git部署插件,输入<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm install —save hexo-deployer-git</span><br></pre></td></tr></table></figure></li>
<li>设置config文件,输入<code>$ vim _config.yml</code>,直接到文件最底部，输入i进行编辑，将下面三行敲进去(注意：每个冒号后都有一个空格)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>: git</span><br><span class="line">repo: 将刚才步骤15网页中的SSH后面的网址复制到这里</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>
保存退出（方法同步骤9）</li>
<li>config编辑完成,下面部署到远端,输入<code>$ hexo d</code>（d代表deploy）,输入GitHub账号和密码，现在就是在往远端进行推送，完成之后，刷新github中你刚create 的repository，发现多了很多内容。</li>
<li>现在复制<code>$ 你的用户名.github.io</code>到网址，就可以看到刚刚你自己编写的博客了，恭喜你，部署成功，终于拥有了自己的博客。</li>
<li>小伙伴可能觉得这个主题不太喜欢，接下来自定义更换主题，推荐这个网址的主题 github.com/litten/hexo-theme-yilia, 输入<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git theme/yilia</span><br></pre></td></tr></table></figure></li>
<li>配置config文件,输入<code>$ vim _config.yml</code>,找到theme：后面的主题改成yilia，保存退出同步骤9. 输入<code>$ hexo clean</code>,再输入<code>$ hexo g</code>（g代表generate),再输入<code>$ hexo s</code>（s代表server）,4000端口刷新</li>
<li>ctrl+c退出，然后推送到远端，输入<code>$ hexo d</code>（d代表deploy）,然后去<code>$ 你的用户名.github.io</code> 这个网址，刷新，即可看到更改好的主题。</li>
</ol>
<hr>
<h2 id="至此大功告成，快去享受你的博客吧"><a href="#至此大功告成，快去享受你的博客吧" class="headerlink" title="至此大功告成，快去享受你的博客吧"></a>至此大功告成，快去享受你的博客吧</h2>]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
